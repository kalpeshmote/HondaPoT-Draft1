//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.10
//
package com.mysampleapp;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;

import android.text.Html;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;

import com.amazonaws.mobileconnectors.amazonmobileanalytics.*;


import com.amazonaws.mobile.AWSMobileClient;
import com.amazonaws.mobile.user.IdentityManager;
import com.amazonaws.mobileconnectors.amazonmobileanalytics.AnalyticsEvent;
import com.amazonaws.mobileconnectors.amazonmobileanalytics.EventClient;
import com.amazonaws.mobileconnectors.amazonmobileanalytics.monetization.GooglePlayMonetizationEventBuilder;

import java.util.Map;


public class HondaActivity extends Activity {
    /** Class name for log messages. */
    private static final String LOG_TAG = HondaActivity.class.getSimpleName();

    private static MobileAnalyticsManager analytics;


    /** The identity manager used to keep track of the current user account. */
    private IdentityManager identityManager;


    final Activity activity = this;
    private WebView webView = null;


    private Context mContext;
    private Activity mActivity;

    private RelativeLayout mRelativeLayout;


    private ProgressBar mProgressBar;



    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.
        AWSMobileClient.initializeMobileClientIfNecessary(this);

        // Obtain a reference to the mobile client. It is created in the Application class.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // Obtain a reference to the identity manager.
        identityManager = awsMobileClient.getIdentityManager();

        setContentView(R.layout.activity_web);






        // Get the application context
        mContext = getApplicationContext();
        // Get the activity
        mActivity = HondaActivity.this;

        // Get the widgets reference from XML layout
        mRelativeLayout = (RelativeLayout) findViewById(R.id.rl);




        webView = (WebView) findViewById(R.id.webview1);
        webView.getSettings().setJavaScriptEnabled(true);


        try {
            analytics = MobileAnalyticsManager.getOrCreateInstance(
                    this.getApplicationContext(),
                    "f59cb061bc17429fab40fd6c7c0cef6c", //Amazon Mobile Analytics App ID
                    "COGNITO_IDENTITY_POOL" //Amazon Cognito Identity Pool ID
            );
        } catch(InitializationException ex) {
            Log.e(this.getClass().getName(), "Failed to initialize Amazon Mobile Analytics", ex);
        }


        generateLoginEvent();
        generateCustomEvent();
        generateACUsedEvent();


        renderWebPage("https://honda.ltimosaic.com/HondaPoTIonicBlank/www/index_android.html");



    }


    // Custom method to render a web page
    protected void renderWebPage(String urlToRender){
        webView.setWebViewClient(new WebViewClient(){
            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon){
                // Do something on page loading started
                // Visible the progressbar
                //  mProgressBar.setVisibility(View.VISIBLE);

            }

            @Override
            public void onPageFinished(WebView view, String url){
                // Do something when page loading finished
                // Toast.makeText(mContext,"Page Loaded.",Toast.LENGTH_SHORT).show();
            }

            @Override
            public boolean shouldOverrideUrlLoading(WebView view, String url)
            {
               view.loadUrl(url);
                return false;
            }

        });

        /*
            WebView
                A View that displays web pages. This class is the basis upon which you can roll your
                own web browser or simply display some online content within your Activity. It uses
                the WebKit rendering engine to display web pages and includes methods to navigate
                forward and backward through a history, zoom in and out, perform text searches and more.

            WebChromeClient
                 WebChromeClient is called when something that might impact a browser UI happens,
                 for instance, progress updates and JavaScript alerts are sent here.
        */
        webView.setWebChromeClient(new WebChromeClient(){
            /*
                public void onProgressChanged (WebView view, int newProgress)
                    Tell the host application the current progress of loading a page.

                Parameters
                    view : The WebView that initiated the callback.
                    newProgress : Current page loading progress, represented by an integer
                        between 0 and 100.
            */
            public void onProgressChanged(WebView view, int newProgress){
                // Update the progress bar with page loading progress
//                mProgressBar.setProgress(newProgress);
//                if(newProgress == 100){
//                    // Hide the progressbar
//                    mProgressBar.setVisibility(View.GONE);
//                }
            }
        });

        // Enable the javascript
        webView.getSettings().setJavaScriptEnabled(true);
        // Render the web page
        webView.loadUrl(urlToRender);
    }


    @Override
    protected void onResume() {
        super.onResume();



        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // pause/resume Mobile Analytics collection
        awsMobileClient.handleOnResume();

        // register notification receiver
        LocalBroadcastManager.getInstance(this).registerReceiver(notificationReceiver,
                new IntentFilter(PushListenerService.ACTION_SNS_NOTIFICATION));

        if(analytics != null) {
            analytics.getSessionClient().resumeSession();
        }

    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        // Handle action bar item clicks here excluding the home button.

        return super.onOptionsItemSelected(item);
    }




    private final BroadcastReceiver notificationReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.d(LOG_TAG, "Received notification from local broadcast. Display it in a dialog.");

            Bundle data = intent.getBundleExtra(PushListenerService.INTENT_SNS_NOTIFICATION_DATA);
            String message = PushListenerService.getMessage(data);

            new AlertDialog.Builder(HondaActivity.this)
                    .setTitle(R.string.push_demo_title)
                    .setMessage(message)
                    .setPositiveButton(android.R.string.ok, null)
                    .show();
        }
    };

    @Override
    protected void onPause() {
        super.onPause();

        // Obtain a reference to the mobile client.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // pause/resume Mobile Analytics collection
        awsMobileClient.handleOnPause();

        // unregister notification receiver
        LocalBroadcastManager.getInstance(this).unregisterReceiver(notificationReceiver);


        if(analytics != null) {
            analytics.getSessionClient().pauseSession();
            analytics.getEventClient().submitEvents();
        }

    }

    @Override
    public void onBackPressed() {
    }


    private void generateLoginEvent() {
        Log.d(LOG_TAG, "Generating Login event...");

        final EventClient eventClient =
                AWSMobileClient.defaultMobileClient().getMobileAnalyticsManager().getEventClient();

        final AnalyticsEvent event = eventClient.createEvent("UserLogin-APIGateWay")
                .withAttribute("Username", "KalpeshM")
                .withAttribute("VIN", "12345")
                .withMetric("Time", Math.random());

        eventClient.recordEvent(event);
        eventClient.submitEvents();
       // showAlertMessageForEvent(event);
    }


    private void generateACUsedEvent() {
        Log.d(LOG_TAG, "Generating Login event...");

        final EventClient eventClient =
                analytics.getEventClient();

        final AnalyticsEvent event = eventClient.createEvent("UserLogin-kk")
                .withAttribute("Engine", "Enabeled")
                .withAttribute("AC", "Enabled")
                .withMetric("Time", Math.random());

        eventClient.recordEvent(event);
        eventClient.submitEvents();
      //  showAlertMessageForEvent(event);
    }

    private void generateCustomEvent() {
        Log.d(LOG_TAG, "Generating custom event...");

        final EventClient eventClient =
                AWSMobileClient.defaultMobileClient().getMobileAnalyticsManager().getEventClient();

        // This creates a Google Play monetization event.  To create an Amazon monetization
        // event instead, use AmazonMonetizationEventBuilder.
        final AnalyticsEvent event = GooglePlayMonetizationEventBuilder.create(eventClient)
                .withFormattedItemPrice("$10.00")
                .withProductId("CAR Engine")
                .withQuantity(1.0)
                .withTransactionId("DVin Number").build();

        eventClient.recordEvent(event);
        eventClient.submitEvents();

    }

    private void showAlertMessageForEvent(final AnalyticsEvent event) {
        new AlertDialog.Builder(HondaActivity.this)
                .setTitle("EVENT SUBMITTED")
                .setMessage(prettyPrintEvent(event))
                .setNegativeButton("OK", null)
                .create()
                .show();
    }

    private CharSequence prettyPrintEvent(final AnalyticsEvent event) {
        final StringBuilder buffer = new StringBuilder();
        buffer.append("<b>EVENT TYPE :</b> <br/>");
        buffer.append(event.getEventType());
        buffer.append("<br/>");

        for (final Map.Entry<String, String> attribute : event.getAllAttributes().entrySet()) {
            buffer.append("<b>ATTRIBUTE :</b> <br/>");
            buffer.append(attribute.getKey());
            buffer.append(" = ");
            buffer.append(attribute.getValue());
            buffer.append("<br/>");
        }

        for (final Map.Entry<String, Double> metric : event.getAllMetrics().entrySet()) {
            buffer.append("<b>METRIC :</b> <br/>");
            buffer.append(metric.getKey());
            buffer.append(" = ");
            buffer.append(metric.getValue());
            buffer.append("<br/>");
        }

        return Html.fromHtml(buffer.toString());
    }
}
